@page "/deleted-listeners"
@using BlazorBootstrap;
@using TNBase.Blazor.Components.DeletedListeners;
@using TNBase.Domain;
@inject TNBase.App.IServiceLayer listenerService

<h3 class="sticky-top">Deleted Listeners</h3>

<div class="container">
    <div class="listeners-list list-group">
        @foreach (var listener in listenerService.GetDeletedListeners())
        {
            <a href="javascript:;" class="list-group-item list-group-item-action @(selectedListener == listener ? "selected" : "")"
            @onclick="(() => SelectListener(listener))">
                <div class="title">@listener.Wallet. @listener.GetNiceName()</div>
                <div class="address">@listener.GetSingleLineAddress()</div>
                <div class="details row">
                    <div class="col-sm">
                        <Icon Name="IconName.MusicPlayer" Size="IconSize.x4" Color="listener.MemStickPlayer ? IconColor.Danger : IconColor.Muted" />
                        <span class="@(listener.MemStickPlayer ? "text-danger" : "text-secondary")">@(listener.MemStickPlayer ? "Owns Player" : "No Player")</span>
                    </div>
                    <div class="col-sm">
                        <Icon Name="IconName.Newspaper" Size="IconSize.x4" Color="listener.SentNewsWallets > 0? IconColor.Danger : IconColor.Muted" />
                        <span class="@(listener.SentNewsWallets > 0 ? "text-danger" : "text-secondary")">@listener.SentNewsWallets news wallet@(listener.SentNewsWallets == 1 ? "" : "s")</span>
                    </div>
                    <div class="col-sm">
                        <Icon Name="IconName.Book" Size="IconSize.x4" Color="listener.SentMagazineWallets > 0? IconColor.Danger : IconColor.Muted" />
                        <span class="@(listener.SentMagazineWallets > 0 ? "text-danger" : "text-secondary")">@listener.SentMagazineWallets magazine wallet@(listener.SentMagazineWallets == 1 ? "" : "s")</span>
                    </div>
                </div>
            </a>
        }
    </div>

</div>

<Offcanvas @ref="offcanvas" title="Edit Listener" OnHiding="DeselectListener">
    <BodyTemplate>
        <div class="title">@selectedListener?.Wallet. @selectedListener?.GetNiceName()</div>
        <div class="dropdown mt-3">
            <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown">Dropdown button</button>
            <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                <li><a class="dropdown-item" href="#">Action</a></li>
                <li><a class="dropdown-item" href="#">Another action</a></li>
                <li><a class="dropdown-item" href="#">Something else here</a></li>
            </ul>
        </div>
        <div class="mt-3">
            <Button Color="ButtonColor.Primary" @onclick="DeselectListener">Hide Offcanvas</Button>
        </div>
    </BodyTemplate>
</Offcanvas>

@code {
    private Offcanvas offcanvas;
    private Listener? selectedListener;
    private string SelectedListenerClass;

    private async Task SelectListener(Listener listener)
    {
        selectedListener = listener;
        await offcanvas?.ShowAsync();
    }

    private async Task DeselectListener()
    {
        selectedListener = null;
        await offcanvas?.HideAsync();
    }
}
